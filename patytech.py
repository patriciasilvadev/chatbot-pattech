# -*- coding: utf-8 -*-
"""patytech.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gxFVaEthbzvc0ggaJpNBKsY4YbFubzqD
"""

!pip install -q google-adk google-generativeai

import os
from google.colab import userdata

os.environ["GOOGLE_API_KEY"] = userdata.get('GOOGLE_API_KEY')

from google.adk.agents import Agent
from google.adk.tools import google_search
from google.genai import types
import textwrap
from IPython.display import Markdown

# 1. Instanciar a ferramenta de busca do Google
ferramenta_de_busca = google_search

# 2. Definir o nome e a descri√ß√£o do agente
nome_do_agente = "PatTech"
descricao_do_agente = "Um chatbot amig√°vel que ajuda pessoas com dificuldades em tecnologia, com acesso √† busca do Google."

# 3. Definir as instru√ß√µes do agente (atualizadas para usar a busca)
instrucoes_do_agente = """
Voc√™ √© o PatTech
Um assistente virtual feito para ajudar quem est√° come√ßando a usar a tecnologia. Sua miss√£o √© ser um amigo confi√°vel, explicando o mundo dos celulares, computadores e internet de forma simples e passo a passo.

Como voc√™ deve conversar:
- Use uma linguagem simples, clara e acolhedora.
- Sempre explique de forma devagar e passo a passo.
- Evite palavras dif√≠ceis. Se usar algum termo t√©cnico, explique com um exemplo ou met√°fora.
- Seja gentil, paciente e encorajador ‚Äì como um amigo que est√° do lado, ensinando com calma.
- D√™ respostas curtas e diretas, e depois siga com um passo a passo.
- Sempre que poss√≠vel, compartilhe um link de v√≠deo no YouTube que mostre como fazer o que foi pedido.
- Nunca use g√≠rias ou express√µes muito informais.
- Mostre que est√° ali para ajudar com carinho, sem julgar.


- Como responder √†s perguntas:
Use seu conhecimento primeiro.

Se necess√°rio, busque tutoriais simples e confi√°veis no YouTube usando termos como:
‚Äúcomo fazer [o que foi pedido] no celular‚Äù ou
‚Äúpasso a passo para [a√ß√£o] no Windows‚Äù.

- Monte sua resposta assim:

Comece com uma frase acolhedora ou encorajadora.
Frase curta explicando o que √© ou o que fazer.
Passo a passo numerado, claro e direto.

Link de um v√≠deo simples do YouTube, com a frase:
‚ÄúVoc√™ pode ver como fazer nesse v√≠deo aqui: [link]‚Äù

Finalize com uma frase de apoio, como:
‚ÄúSe precisar de mais ajuda, estou aqui!‚Äù ou "Voc√™ consegue, continue tentando!"

Exemplo de resposta com tudo junto:
Pergunta: Como tirar print no celular?

Resposta:
---
Claro! Tirar print √© como tirar uma foto da tela.

Veja como fazer:

Pressione ao mesmo tempo os bot√µes Liga/Desliga e Volume para baixo.

A tela vai piscar e o print ser√° salvo na sua galeria.

üëâ Voc√™ pode ver um v√≠deo explicando aqui: https://www.youtube.com/watch?v=exemplo

Se n√£o funcionar, me diga o modelo do seu celular que eu te ajudo. üòä
---
"""

# Atualizar o agente com as novas instru√ß√µes
pattech_agente = Agent(
    name=nome_do_agente,
    model="gemini-2.0-flash",
    description=descricao_do_agente,
    instruction=instrucoes_do_agente,
    tools=[ferramenta_de_busca]
)

# Fun√ß√£o auxiliar para exibir texto formatado em Markdown
def to_markdown(text):
    text = text.replace('‚Ä¢', '  *')
    return Markdown(textwrap.indent(text, '> ', predicate=lambda _: True))

# Fun√ß√£o para interagir com o agente
from google.adk.runners import Runner
from google.adk.sessions import InMemorySessionService

def interagir_com_agente(agente: Agent, mensagem_usuario: str) -> str:
    session_service = InMemorySessionService()
    session = session_service.create_session(app_name=agente.name, user_id="user1", session_id="session1")
    runner = Runner(agent=agente, app_name=agente.name, session_service=session_service)
    content = types.Content(role="user", parts=[types.Part(text=mensagem_usuario)])

    resposta_final = ""
    for evento in runner.run(user_id="user1", session_id="session1", new_message=content):
        if evento.is_final_response():
            for parte in evento.content.parts:
                if parte.text is not None:
                    resposta_final += parte.text
                    resposta_final += "\n"
        elif evento.tool_code:
            print(f"\n--- Ferramenta de Busca do Google Ativada ---")
            print(f"C√≥digo da Ferramenta: {evento.tool_code.code}")
            if evento.tool_code.outputs:
                print(f"Resultados da Busca:")
                for output in evento.tool_code.outputs:
                    if hasattr(output, 'parts'):
                        for part in output.parts:
                            print(f"- {part.text}")
            print("---------------------------------------------\n")
    return resposta_final

# Loop de intera√ß√£o com o usu√°rio
print("Ol√°! Sou o PatTech, seu assistente de tecnologia. Como posso ajudar hoje?")
while True:
    pergunta_do_usuario = input("Voc√™: ")
    if pergunta_do_usuario.lower() in ["sair", "encerrar", "adeus", "tchau"]:
        print("PatTech: Foi um prazer ajudar! At√© a pr√≥xima!")
        break
    resposta_do_agente = interagir_com_agente(pattech_agente, pergunta_do_usuario)
    print("PatTech:")
    display(to_markdown(resposta_do_agente))
    print("------")